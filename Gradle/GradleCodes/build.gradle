task hello{
    doLast{
        println 'Hello World!'
    }
}

task printStringClass << {
    def str1 = '单引号'
    def str2 = "双引号"
    
    println "单引号定义的字符串类型："+str1.getClass().name 
    println "双引号定义的字符串类型："+str2.getClass().name
}

task printStringVar << {
    def name = "张三"

    println '单引号的变量计算：${name}'
    println "双引号的变量计算：${name}"
}

task printList << {
    def numList = [1,2,3,4,5,6]
    println numList.getClass().name
    
    println numList[1] //访问第二个元素
    println numList[-1] //访问最后一个元素
    println numList[-2] //访问倒数第二个元素
    println numList[1..3] //访问第二个到第四个元素

    numList.each{
        println it //it代表正在迭代的元素
    }
}


task printlnMap << {
    def map1 = ['width':1024,'height':768]
    println map1.getClass().name 

    println map1['width']
    println map1.height

    map1.each{
        println "Key:${it.key},Value:${it.value}"
    }
}


task invokeMethod << {
    method1(1,2)
    method1 1,2
}

def method1 (int a , int b ){
    println a + b
} 

task printMethodReturn << {
    def add1 = method2 1,2
    def add2 = method2 5,3
    println "add1: ${add1},add2: ${add2}"
}

def method2 (int a , int b ){
    if(a>b){
        a
    }else{
        b
    }
}

task helloJavaBean << {
    Person p = new Person()

    println "名字是：${p.name}"
    p.name = "张三"
    println "名字是：${p.name}"
    println "年龄是：${p.age}"
}

class Person{
    private String name 
    public int getAge(){
        12
    }
}

task helloClosure << {
    //使用我们自定义的闭包
    customEach{
        println it
    }

     eachMap{k,v ->
        println "${k} is ${v}"
    }
}

def customEach(closure){
    //模拟一个有10个元素的集合，开始迭代
    for(int i in 1..10){
        closure(i)
    }
}

def eachMap(closure){
    def map1 = ["name":"张三","age":18]
    map1.each{
        closure(it.key,it.value)
    }
}

task helloDelegate << {
    new Delegate().test{
        println "thisObject:${thisObject.getClass()}"
        println "owner:${owner.getClass()}"
        println "delegate:${delegate.getClass()}"

        method1()
        it.method1()
    }
}

def method1(){
    println "Context this:${this.getClass()} in root"
    println "method1 in root"
}

class Delegate{
    def method1(){
        println "Delegate this: ${this.getClass()} in Delegate"
        println "method1 in Delegate"
    }

    def test(Closure<Delegate> closure){
        closure(this)
    }
}

task customTask1 {
    doFirst{
        println 'customTask1:doFirst'
    }
    doLast{
        println 'customTask1:doLast'
    }
}

tasks.create("customTask2"){
    doFirst{
        println 'customTask2:doFirst'
    }
    doLast{
        println 'customTask2:doLast'
    }
}

task ex35Hello << {
    println 'Hello'
}

task ex35Main (dependsOn: ex35Hello){
    doLast{
        println 'Main'
    }
}


task ex35World << {
    println 'World'
}

task ex35MultiTask{
    dependsOn ex35Hello,ex35World
    doLast{
        println 'MultiTask'
    }
}

task ex36Hello << {
    println 'dowList1'
}

ex36Hello.doFirst{
    println 'dowFirst'
}

ex36Hello.doLast{
    println project.hasProperty('ex36Hello')
    println 'dowLast'
}


//括号可省略
def Task ex41CreateTask1 = task (ex41CreateTask1)

ex41CreateTask1.doLast{
    println "创建方法原型为：Task task(String name) throws InvalidUserDataException"
}

 def Task ex41CreateTask2 = task(ex41CreateTask2,group:BasePlugin.BUILD_GROUP)

 ex41CreateTask2.doLast{
    println "创建方法原型为：Task task (Map<String,?> args ,String name) throws InvalidUserDataException"
    println "任务分组：${ex41CreateTask2.group}"
 }

def Task myTask = task ex43GroupTask
myTask.group = BasePlugin.BUILD_GROUP
myTask.description = '这是一个构建的引导任务'
myTask.doLast{
    println "group:${group},description:${description}"
}

